<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="test" id="1" localization="8" tooltip="" x="192" y="199">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        # Инициализация прокси для NAOqi
        try:
            self.motion = ALProxy("ALMotion")  # Прокси для движения
            self.tts = ALProxy("ALTextToSpeech")  # Прокси для речи
            self.autonomous = ALProxy("ALAutonomousLife")  # Прокси для Autonomous Life
            self.autonomous.setState("disabled")  # Отключаем Autonomous Life
            self.tts.setLanguage("Finnish")  # Устанавливаем финский язык
            self.behavior = ALProxy("ALBehaviorManager")  # Для остановки поведений
        except Exception as e:
            self.logger.info("Error initializing proxies: " + str(e))

    def onUnload(self):
        # Очистка: перевод робота в режим отдыха
        try:
            self.motion.wbEnable(False)  # Отключаем balancer
            self.motion.rest()  # Засыпаем робота
        except Exception as e:
            self.logger.info("Error during rest: " + str(e))

    def onInput_onStart(self):
        import time
        try:
            # Просыпаемся и активируем жёсткость ног и рук
            self.logger.info("Waking up robot")
            self.motion.wakeUp()
            self.motion.setStiffnesses("Legs", 1.0)  # Активируем моторы ног
            self.motion.setStiffnesses("Arms", 1.0)  # Активируем моторы рук

            # Включаем whole body balancer для стабильности
            self.motion.wbEnable(True)
            self.motion.wbFootState("Plane", "Legs")  # Фиксируем ступни на плоскости
            self.motion.wbGoToBalance("Legs", 1.0)  # Переходим к балансу на ногах

            # Говорим "Начинаем упражнение марш на месте"
            self.logger.info("Saying start message")
            self.tts.say("Naamne harjoituksen marssi paikallaan")

            # Пауза 2 секунды
            time.sleep(2.0)

            # Говорим "Начали"
            self.logger.info("Saying 'Aloitetaan'")
            self.tts.say("Aloitetaan")

            # Пауза 1 секунда
            time.sleep(1.0)

            # Махи руками
            self.logger.info("Starting arm swings")
            self.tts.say("Siirrymme käsien heilutuksiin")  # "Переходим к махам руками"
            time.sleep(2.0)
            for i in range(1, 11):  # 10 повторений
                self.logger.info("Swinging arms, repetition %d" % i)
                self.tts.say(str(i))

                # Левая рука вверх (ShoulderPitch), правая опускается вниз
                self.logger.info("Raising left arm %d" % i)
                names = ["LShoulderPitch", "RShoulderPitch"]
                keys = [[0.0, -1.5], [0.0, 1.5]]  # -1.5 рад (~86°) вверх, правая опускается вниз
                times = [[0.5, 2.0], [0.5, 2.0]]
                self.motion.angleInterpolation(names, keys, times, True)

                # Пауза
                time.sleep(1.0)

                # Левая рука вниз, правая вверх
                self.logger.info("Lowering left, raising right arm %d" % i)
                names = ["LShoulderPitch", "RShoulderPitch"]
                keys = [[-1.5, 1.5], [1.5, -1.5]]  # Левая опускается вниз, правая поднимается вверх
                times = [[0.5, 2.0], [0.5, 2.0]]
                self.motion.angleInterpolation(names, keys, times, True)

                # Пауза
                time.sleep(1.0)

            # Завершаем и засыпаем
            self.logger.info("Exercise completed, resting robot")
            self.motion.wbEnable(False)  # Отключаем balancer
            self.motion.rest()

            # Активируем выход onStopped
            self.onStopped()
        except Exception as e:
            self.logger.info("Error during execution: " + str(e))
            self.motion.wbEnable(False)
            self.motion.rest()  # Засыпаем в случае ошибки
            self.onStopped()

    def onInput_onStop(self):
        # Остановка всех движений и поведений перед unload
        try:
            self.motion.stopMove()  # Остановить текущие движения
            self.behavior.stopAllBehaviors()  # Остановить все поведения
            self.motion.wbEnable(False)  # Отключаем balancer
        except Exception as e:
            self.logger.info("Error stopping behaviors: " + str(e))
        self.onUnload()  # Очистка
        self.onStopped()  # Активируем выход]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="test2" id="2" localization="8" tooltip="" x="417" y="57">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        # Инициализация прокси для NAOqi
        try:
            self.motion = ALProxy("ALMotion")  # Прокси для движения
            self.tts = ALProxy("ALTextToSpeech")  # Прокси для речи
            self.autonomous = ALProxy("ALAutonomousLife")  # Прокси для Autonomous Life
            self.autonomous.setState("disabled")  # Отключаем Autonomous Life
            self.tts.setLanguage("Finnish")  # Устанавливаем финский язык
            self.behavior = ALProxy("ALBehaviorManager")  # Для остановки поведений
        except Exception as e:
            self.logger.info("Error initializing proxies: " + str(e))

    def onUnload(self):
        # Очистка: перевод робота в режим отдыха
        try:
            self.motion.wbEnable(False)  # Отключаем balancer
            self.motion.rest()  # Засыпаем робота
        except Exception as e:
            self.logger.info("Error during rest: " + str(e))

    def onInput_onStart(self):
        import time
        try:
            # Просыпаемся и активируем жёсткость ног и рук
            self.logger.info("Waking up robot")
            self.motion.wakeUp()
            self.motion.setStiffnesses("Legs", 1.0)  # Активируем моторы ног
            self.motion.setStiffnesses("Arms", 1.0)  # Активируем моторы рук

            # Включаем whole body balancer для стабильности
            self.motion.wbEnable(True)
            self.motion.wbFootState("Plane", "Legs")  # Фиксируем ступни на плоскости
            self.motion.wbGoToBalance("Legs", 1.0)  # Переходим к балансу на ногах

            # Говорим "Начинаем упражнение марш на месте"
            self.logger.info("Saying start message")
            self.tts.say("Naamne harjoituksen marssi paikallaan")

            # Пауза 2 секунды
            time.sleep(2.0)

            # Говорим "Начали"
            self.logger.info("Saying 'Aloitetaan'")
            self.tts.say("Aloitetaan")

            # Пауза 1 секунда
            time.sleep(1.0)

            # Приседания
            self.logger.info("Starting squats")
            self.tts.say("Siirrymme kevyisiin kyykkyihin")  # "Переходим к лёгким приседаниям"
            time.sleep(2.0)
            for i in range(1, 11):  # 10 повторений
                self.logger.info("Squatting, repetition %d" % i)
                self.tts.say(str(i))

                # Приседание (сгибание колен и бёдер)
                self.logger.info("Lowering into squat %d" % i)
                names = ["LHipPitch", "LKneePitch", "RHipPitch", "RKneePitch", ]
                keys = [[0.0, -1.0], [0.0, 1.5], [0.0, -1.0], [0.0, 1.5], ]  # Бедро на -1.0 рад, колено на 1.5 рад, руки на 90° вверх
                times = [[0.5, 3.0], [0.5, 3.0], [0.5, 3.0], [0.5, 3.0], [0.5, 3.0], [0.5, 3.0]]  # Плавное движение за 3 секунды
                self.motion.angleInterpolation(names, keys, times, True)

                # Пауза для наблюдения
                time.sleep(3.0)

                # Возвращение в стоячее положение
                self.logger.info("Rising from squat %d" % i)
                names = ["LHipPitch", "LKneePitch", "RHipPitch", "RKneePitch", ]
                keys = [[-1.0, 0.0], [1.5, 0.0], [-1.0, 0.0], [1.5, 0.0],]  # Возвращение в исходное положение, руки вниз
                times = [[0.5, 3.0], [0.5, 3.0], [0.5, 3.0], [0.5, 3.0], ]
                self.motion.angleInterpolation(names, keys, times, True)

                # Пауза
                time.sleep(1.0)

            # Завершаем и засыпаем
            self.logger.info("Exercise completed, resting robot")
            self.motion.wbEnable(False)  # Отключаем balancer
            self.motion.rest()

            # Активируем выход onStopped
            self.onStopped()
        except Exception as e:
            self.logger.info("Error during execution: " + str(e))
            self.motion.wbEnable(False)
            self.motion.rest()  # Засыпаем в случае ошибки
            self.onStopped()

    def onInput_onStop(self):
        # Остановка всех движений и поведений перед unload
        try:
            self.motion.stopMove()  # Остановить текущие движения
            self.behavior.stopAllBehaviors()  # Остановить все поведения
            self.motion.wbEnable(False)  # Отключаем balancer
        except Exception as e:
            self.logger.info("Error stopping behaviors: " + str(e))
        self.onUnload()  # Очистка
        self.onStopped()  # Активируем выход]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="test3" id="3" localization="8" tooltip="" x="684" y="111">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
